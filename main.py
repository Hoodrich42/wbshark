import telebot
from telebot import types
import threading
import time
from notifications import Notifications
from dotenv import load_dotenv
from db_requests import *
from wb_requests import *
from report import *

load_dotenv()

bot_token = os.getenv('TOKEN')
bot = telebot.TeleBot(bot_token)

db_query = DbRequest()
api_query = ApiRequest()
notifications = Notifications()
report = Report()


def check_request(response):
    fl_api = False
    msg = ''
    try:
        if response['code'] == 400:
            fl_api = False
            msg = "can't parse dateFrom"
        if response['code'] == 429:
            fl_api = False
            msg = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
        if response['code'] == 401:
            fl_api = False
            msg = '–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'
            return msg, fl_api
    except:
        fl_api = True
    return msg, fl_api

def check_notifications():
    while True:
        all_users = db_query.select_all()
        for user in all_users:
            telegram_id = user[0]
            api_keys_list = user[1].split('|')
            for api_key in api_keys_list:
                if api_key != 'none':
                    api_key_number = api_keys_list.index(api_key)
                    stock = api_query.get_stock(api_key)
                    orders_3_month = api_query.get_orders(api_key, '3_month')
                    sales_3_month = api_query.get_sales(api_key, '3_month')
                    try:
                        notifications.order_cheking('order', telegram_id, api_key_number, api_key, stock, orders_3_month, sales_3_month)
                        notifications.order_cheking('sale', telegram_id, api_key_number, api_key, stock, orders_3_month, sales_3_month)
                        notifications.order_cheking('cancel', telegram_id, api_key_number, api_key, stock, orders_3_month, sales_3_month)
                    except:
                        print(stock)
                        print(orders_3_month)
                        print(sales_3_month)
        time.sleep(1800)


@bot.message_handler(commands=['start'])
def startt(message):
    telegram_id = str(message.from_user.id)
    reg = False
    all_users = db_query.select_all()
    for user in all_users:
        if telegram_id == user[0]:
            reg = True

    if not reg:
        db_query.insert_db(telegram_id)

    start_markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üëâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data='podkluchenie')
    start_markup.add(btn1)
    msg = f'ü¶à WB Shark Bot - —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –Ω–∞ WB. –í–æ—Ç –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n' \
          f'- üõí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n' \
          f'- ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–∞—Ö\n' \
          f'- üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö\n' \
          f'- üíº –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏\n' \
          f'- üöõ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n' \
          f'- üìë –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n\n' \
          f'–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n' \
          f'- üü© –ê–í–° –∞–Ω–∞–ª–∏–∑\n' \
          f'- üåä –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Storm: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ–µ–≤ WB –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ –≤—ã–∫—É–ø–∞—Ö\n' \
          f'- üë• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ WB\n' \
          f'- üóÉÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ (7, 14, 30, 60 –¥–Ω–µ–π)\n' \
          f'- ‚ùóÔ∏è–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã'
    bot.send_message(message.chat.id, text=f'{msg}', reply_markup=start_markup)


@bot.message_handler(commands=['my'])
def kabinet(message):
    kabinet_markup = types.InlineKeyboardMarkup()
    btn3 = types.InlineKeyboardButton(f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏', callback_data=f'api_keys')
    btn4 = types.InlineKeyboardButton(f'üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/dolphey271')
    btn1 = types.InlineKeyboardButton(f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    #btn2 = types.InlineKeyboardButton(f'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data=f'balance')
    kabinet_markup.add(btn1).add(btn3).add(btn4)
    ip_name_list = db_query.select_ip_name(message.from_user.id).split('|')
    bot.send_message(message.chat.id, text=f'üê≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬†\n\n¬∑ ID: {message.from_user.id}\n\n¬∑ –ú–∞–≥–∞–∑–∏–Ω—ã: {len(ip_name_list)}', reply_markup=kabinet_markup)

@bot.message_handler(commands=['tarif'])
def tariff(message):
    msg = f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 30 –¥–Ω–µ–π –¥–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –¥–∞—Ç—ã ' \
          f'(–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü –≤ —Ä–∞—Å—á–µ—Ç–Ω—ã–π –¥–µ–Ω—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞). \n\n' \
          f'–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü —Å–æ—Å—Ç–∞–≤–∏—Ç:\n\n' \
          f'–û—Ç 1 –¥–æ 300 = 190‚ÇΩ / –º–µ—Å\n\n' \
          f'–û—Ç 301 –¥–æ 1000 = 390‚ÇΩ / –º–µ—Å\n\n' \
          f'–û—Ç 1001 –¥–æ 3000 = 690‚ÇΩ / –º–µ—Å\n\n' \
          f'–û—Ç 3001 –¥–æ 10¬†000 = 1090‚ÇΩ / –º–µ—Å\n\n' \
          f'–û—Ç 10 001 = 1 490 ‚ÇΩ / –º–µ—Å'
    bot.send_message(message.chat.id, text=f'{msg}')

@bot.message_handler(commands=['short'])
def short(message):
    short_markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∂–∏–º –º–∏–Ω–∏–º—É–º–∞', callback_data='short_mode_from_command')
    short_markup.add(btn1)
    msg = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ –º–∏–Ω–∏–º—É–º üëá\n\n' \
          f'–ö–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –≤—ã–∫—É–ø–∞—Ö: \n' \
          f'- –ò–ü –∑–∞–∫–∞–∑–∞ \n' \
          f'- üïê –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ \n' \
          f'- üõí –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ \n' \
          f'- üìà –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ç–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ \n' \
          f'- üÜî –ê—Ä—Ç–∏–∫—É–ª –í–ë \n' \
          f'- üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ \n' \
          f'- üåê –õ–æ–≥–∏—Å—Ç–∏–∫–∞ \n' \
          f'- üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö¬ª\n\n' \
          f'–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
    bot.send_message(message.chat.id, text=f'{msg}', reply_markup=short_markup)

@bot.message_handler(commands=['reports'])
def reports(message):
    telegram_id = message.from_user.id
    api_key = db_query.select_api_key(telegram_id).split('|')[0]
    ip_name = db_query.select_ip_name(telegram_id).split('|')[0]
    msg = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é...‚è≥')
    orders_30_days = api_query.get_orders(api_key, '30_days')
    sales_30_days = api_query.get_sales(api_key, '30_days')
    msg_txt = report.report(orders_30_days, sales_30_days, telegram_id, ip_name)
    bot.edit_message_text(msg_txt, message.chat.id, msg.message_id)


@bot.message_handler(content_types=['text'])
def add_api_key(message):
    all_users = db_query.select_all()
    telegram_id = message.from_user.id

    reg = False
    for user in all_users:
        if str(telegram_id) == user[0]:
            reg = True

    if reg:
        api_key = message.text
        orders_today = api_query.get_orders(api_key, 'today')
        msg, fl_orders_today = check_request(orders_today)
        if fl_orders_today:
            nm_id = orders_today[0]['nmId']
            ip_name = api_query.api_ip(nm_id, api_key)
            api_keys_list = db_query.select_api_key(telegram_id).split('|')
            ip_names_list = db_query.select_ip_name(telegram_id).split('|')
            if api_keys_list[0] == 'none' or api_keys_list[1] == 'none':
                confirm_marup = types.InlineKeyboardMarkup()
                if api_keys_list[0] == 'none':
                    new_api_key = f'{api_key}*|none'
                    new_ip_name = f'{ip_name}*|none'
                elif api_keys_list[1] == 'none':
                    new_api_key = f'{api_keys_list[0]}|{api_key}*'
                    new_ip_name = f'{ip_names_list[0]}|{ip_name}*'
                db_query.update_ip_name(new_ip_name, telegram_id)
                db_query.update_api_key(new_api_key, telegram_id)
                btn1 = types.InlineKeyboardButton('–î–∞', callback_data='confirm_api_key')
                btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_api_key')
                confirm_marup.add(btn1, btn2)
                bot.send_message(message.chat.id, text=f'{ip_name}\n\n–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á?', reply_markup=confirm_marup)
            else:
                bot.send_message(message.chat.id, text=f'–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 2 API –∫–ª—é—á–∞')
        else:
            bot.send_message(message.chat.id, text=f'–ù–µ—É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç')


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    data = call.data.split(':')
    telegram_id = call.from_user.id
    if data[0] == 'confirm_api_key':
        api_keys_list = db_query.select_api_key(telegram_id).split('|')
        ip_names_list = db_query.select_ip_name(telegram_id).split('|')
        if '*' in api_keys_list[0]:
            api_keys_list[0] = api_keys_list[0].split('*')[0]
            ip_names_list[0] = ip_names_list[0].split('*')[0]
        elif '*' in api_keys_list[1]:
            api_keys_list[1] = api_keys_list[1].split('*')[0]
            ip_names_list[1] = ip_names_list[1].split('*')[0]
        db_query.update_api_key(f'{api_keys_list[0]}|{api_keys_list[1]}', telegram_id)
        db_query.update_ip_name(f'{ip_names_list[0]}|{ip_names_list[1]}', telegram_id)
        msg = '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!\n\n' \
              'üïí –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, WB Order Bot —Å–æ–±–µ—Ä–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id)

    if data[0] == 'cancel_api_key':
        api_keys_list = db_query.select_api_key(telegram_id).split('|')
        ip_names_list = db_query.select_ip_name(telegram_id).split('|')
        if '*' in api_keys_list[0]:
            api_keys_list[0] = 'none'
            ip_names_list[0] = 'none'
        elif '*' in api_keys_list[1]:
            api_keys_list[1] = 'none'
            ip_names_list[1] = 'none'
        db_query.update_api_key(f'{api_keys_list[0]}|{api_keys_list[1]}', telegram_id)
        db_query.update_ip_name(f'{ip_names_list[0]}|{ip_names_list[1]}', telegram_id)
        bot.edit_message_text('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω', call.message.chat.id, call.message.message_id)

    if data[0] == 'settings':
        if len(data) > 1:
            rezerv = db_query.select_rezerv(call.from_user.id).split('|')[int(data[1])]
            short_mode = db_query.select_short_mode(call.from_user.id).split('|')[int(data[1])]
            if short_mode == 'true':
                short_mode_txt = '–í–∫–ª.'
            elif short_mode == 'false':
                short_mode_txt = '–í—ã–∫–ª.'
            settings_markup = types.InlineKeyboardMarkup()
            ip_name = db_query.select_ip_name(call.from_user.id).split('|')[int(data[1])]
            btn1 = types.InlineKeyboardButton(f'–†–µ–∑–µ—Ä–≤ —Å–∫–ª–∞–¥–∞: {rezerv} –¥–Ω.', callback_data=f'rezerv:{data[1]}')
            btn2 = types.InlineKeyboardButton(f'–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {short_mode_txt}', callback_data=f'short_mode:{data[1]}')
            settings_markup.add(btn1, btn2)
            bot.edit_message_text(f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n{ip_name}', call.message.chat.id, call.message.message_id, reply_markup=settings_markup)
        else:
            ip_name_list = db_query.select_ip_name(call.from_user.id).split('|')
            cur_ip_markup = types.InlineKeyboardMarkup()
            for i in range(len(ip_name_list)):
                if ip_name_list[i] != 'none':
                    btn = types.InlineKeyboardButton(f'{ip_name_list[i]}', callback_data=f'settings:{i}')
                    cur_ip_markup.add(btn)
            bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:', call.message.chat.id, call.message.message_id, reply_markup=cur_ip_markup)

    if data[0] == 'rezerv':
        if len(data) < 3:
            ip_name = db_query.select_ip_name(call.from_user.id).split('|')[int(data[1])]
            rezerv_markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('7 –¥–Ω.', callback_data=f'rezerv:{data[1]}:7')
            btn2 = types.InlineKeyboardButton('14 –¥–Ω.', callback_data=f'rezerv:{data[1]}:14')
            btn3 = types.InlineKeyboardButton('30 –¥–Ω.', callback_data=f'rezerv:{data[1]}:30')
            btn4 = types.InlineKeyboardButton('60 –¥–Ω.', callback_data=f'rezerv:{data[1]}:60')
            rezerv_markup.add(btn1, btn2).add(btn3, btn4)
            bot.edit_message_text(f'{ip_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:', call.message.chat.id, call.message.message_id, reply_markup=rezerv_markup)
        else:
            rezerv = db_query.select_rezerv(call.from_user.id).split('|')
            rezerv[int(data[1])] = int(data[2])
            new_rezerv = ''
            for i in range(len(rezerv)):
                if i + 1 == len(rezerv):
                    new_rezerv += f'{rezerv[i]}'
                else:
                    new_rezerv += f'{rezerv[i]}|'
            db_query.update_rezerv(new_rezerv, call.from_user.id)
            bot.edit_message_text(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã', call.message.chat.id, call.message.message_id)

    if data[0] == 'api_keys':
        ip_names = db_query.select_ip_name(call.from_user.id).split('|')
        api_keys_edit_markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á', callback_data=f'add_api_key')
        if ip_names[0] != 'none':
            msg = ''
            for i in range(len(ip_names)):
                if ip_names[i] != 'none':
                    if i + 1 == len(ip_names):
                        msg += f'{i + 1}. {ip_names[i]}'
                    else:
                        msg += f'{i + 1}. {ip_names[i]}\n'

            btn2 = types.InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á', callback_data=f'delete_api_key')
            if 'none' in ip_names:
                api_keys_edit_markup.add(btn1)
            api_keys_edit_markup.add(btn2)
            bot.edit_message_text(f'{msg}', call.message.chat.id, call.message.message_id,reply_markup=api_keys_edit_markup)
        else:
            api_keys_edit_markup.add(btn1)
            bot.edit_message_text(f'–£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞', call.message.chat.id, call.message.message_id, reply_markup=api_keys_edit_markup)

    if data[0] == 'add_api_key':
        bot.edit_message_text('üõ† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï\n\n1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (<a href="https://seller.wildberries.ru/supplier-settings/access-to-api">—Å—Å—ã–ª–∫–∞</a>). \n\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω] –∏ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞. \n\n3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –¢–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n\n4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n\nüìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:', call.message.chat.id, call.message.message_id, parse_mode='html')

    if data[0] == 'delete_api_key':
        api_keys_markup = types.InlineKeyboardMarkup()
        ip_names = db_query.select_ip_name(call.from_user.id).split('|')
        for i in range(len(ip_names)):
            if ip_names[i] != 'none':
                btn1 = types.InlineKeyboardButton(f'{ip_names[i]}', callback_data=f'current_ip:{i}')
                api_keys_markup.add(btn1)
        btn_otmena = types.InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∞', callback_data=f'otmena_del')
        api_keys_markup.add(btn_otmena)
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ API –∫–ª—é—á –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', call.message.chat.id, call.message.message_id, reply_markup=api_keys_markup)

    if data[0] == 'current_ip':
        ip_names = db_query.select_ip_name(call.from_user.id).split('|')
        cur_ip_name = int(data[1])
        deleted_ip = ip_names[cur_ip_name]
        ip_names[cur_ip_name] = 'none'
        updated_ip_names = ''
        for i in range(len(ip_names)):
            if i + 1 == len(ip_names):
                updated_ip_names += f'{ip_names[i]}'
            else:
                updated_ip_names += f'{ip_names[i]}|'
        db_query.update_ip_name(updated_ip_names, call.from_user.id)
        api_keys = db_query.select_api_key(call.from_user.id).split('|')
        api_keys[cur_ip_name] = 'none'
        updated_api_keys = ''
        for i in range(len(api_keys)):
            if i + 1 == len(api_keys):
                updated_api_keys += f'{api_keys[i]}'
            else:
                updated_api_keys += f'{api_keys[i]}|'
        db_query.update_api_key(updated_api_keys, call.from_user.id)
        bot.edit_message_text(f'{deleted_ip} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', call.message.chat.id, call.message.message_id)

    if data[0] == 'otmena_del':
        bot.edit_message_text(f'–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω', call.message.chat.id, call.message.message_id)

    if data[0] == 'podkluchenie':
        podkluch_markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('üë®üèª‚Äçüéì –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ API', callback_data='podrobneeapi')
        btn2 = types.InlineKeyboardButton('üë®üèª‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/dolphey271')
        btn3 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start')
        podkluch_markup.add(btn1).add(btn2).add(btn3)
        bot.edit_message_text('üõ† –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï\n\n1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (<a href="https://seller.wildberries.ru/supplier-settings/access-to-api">—Å—Å—ã–ª–∫–∞</a>). \n\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É [+ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω] –∏ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞. \n\n3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –¢–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n\n4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ [–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω], –∞ –∑–∞—Ç–µ–º —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n\nüìù –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:', call.message.chat.id, call.message.message_id, reply_markup=podkluch_markup, parse_mode='html')

    if data[0] == 'podrobneeapi':
        podrob_markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='podkluchenie')
        podrob_markup.add(btn1)
        bot.edit_message_text('üîë API —Ç–æ–∫–µ–Ω (–∫–ª—é—á) Wildberries\n\n–ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ, —Ç–æ API-—Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö, –ø—Ä–æ–¥–∞–∂–∞—Ö, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö, –Ω–∞–ª–∏—á–∏—é –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É. –î–∞–ª–µ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.\n\nAPI-—Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–º–∏ –∏–ª–∏ –∏–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –≤ —Ä–∞–±–æ—Ç–µ —Å Wildberries. \n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ API:\n\n‚ú¥Ô∏è –° –ø–æ–º–æ—â—å—é API –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º, –∑–∞–∫–∞–∑–∞–º –∏ –ø–æ—Å—Ç–∞–≤–∫–∞–º. WB –∂–µ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–∞—ë—Ç –ª–∏—à—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. \n\n‚ú¥Ô∏è API –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–∫–ª—é—á–µ–Ω–∞. \n\n‚ú¥Ô∏è –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API-—Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB, –∞ –∑–Ω–∞—á–∏—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.', call.message.chat.id, call.message.message_id, reply_markup=podrob_markup)

    if data[0] == 'short_mode_from_command':
        ip_name_list = db_query.select_ip_name(call.from_user.id).split('|')
        cur_ip_markup = types.InlineKeyboardMarkup()
        for i in range(len(ip_name_list)):
            if ip_name_list[i] != 'none':
                btn = types.InlineKeyboardButton(f'{ip_name_list[i]}', callback_data=f'short_mode:{i}')
                cur_ip_markup.add(btn)
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:', call.message.chat.id, call.message.message_id, reply_markup=cur_ip_markup)

    if data[0] == 'short_mode':
        if len(data) < 3:
            short_mode_murkup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å', callback_data=f'short_mode:{data[1]}:true')
            btn2 = types.InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å', callback_data=f'short_mode:{data[1]}:false')
            short_mode_murkup.add(btn1, btn2)
            msg = f'–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n' \
                  f'ü™ô–ò–ü\n\n' \
                  f'15.03.2024 09:26:42\n' \
                  f'üõí–ó–∞–∫–∞–∑[26]: 210‚ÇΩ\n' \
                  f'üìà –°–µ–≥–æ–¥–Ω—è: 26 –Ω–∞ 4438‚ÇΩ\n' \
                  f'üÜî –ê—Ä—Ç: 123456789\n' \
                  f'üìÅ –ü—Ä–µ–¥–º–µ—Ç\n' \
                  f'üåê –¢—É–ª–∞ ‚Üí –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å\n\n' \
                  f'üì¶ –¢—É–ª–∞: 42\n' \
                  f'üì¶ –í—Å–µ–≥–æ: 42'
            bot.edit_message_text(text=f'{msg}', chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=short_mode_murkup)
        else:
            short_mode = db_query.select_short_mode(call.from_user.id).split('|')
            short_mode[int(data[1])] = data[2]
            short_mode = f'{short_mode[0]}|{short_mode[1]}'
            db_query.update_short_mode(short_mode, call.from_user.id)
            bot.edit_message_text(text=f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã', chat_id=call.message.chat.id, message_id=call.message.message_id)


thread1 = threading.Thread(target=check_notifications).start()
bot.infinity_polling(timeout=10, long_polling_timeout=5)
