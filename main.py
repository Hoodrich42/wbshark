import telebot
from telebot import types
import threading
import time
from notifications import Notifications
from dotenv import load_dotenv
from db_requests import *
from wb_requests import *

load_dotenv()

bot_token = os.getenv('TOKEN')
bot = telebot.TeleBot(bot_token)

db_query = DbRequest()
api_query = ApiRequest()
notifications = Notifications()

def check_request(response):
    fl_api = False
    msg = ''
    try:
        if response['code'] == 400:
            fl_api = False
            msg = "can't parse dateFrom"
        if response['code'] == 429:
            fl_api = False
            msg = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
        if response['code'] == 401:
            fl_api = False
            msg = '–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω'
            return msg, fl_api
    except:
        fl_api = True
    return msg, fl_api

def check_notifications():
    while True:
        all_users = db_query.select_all()
        for user in all_users:
            telegram_id = user[0]
            api_keys_list = user[1].split('|')
            for api_key in api_keys_list:
                api_key_number = api_keys_list.index(api_key)
                response = notifications.order_cheking('cancel', telegram_id, api_key_number, api_key)
                print(len(response))
                #bot.send_message(telegram_id, response)
                time.sleep(100)
        time.sleep(5)


@bot.message_handler(commands=['start'])
def startt(message):
    telegram_id = str(message.from_user.id)
    reg = False
    all_users = db_query.select_all()
    for user in all_users:
        if telegram_id == user[0]:
            reg = True

    if not reg:
        db_query.insert_db(telegram_id)

    start_markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üëâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data='podkluchenie')
    start_markup.add(btn1)
    msg = f'ü¶à WB Shark Bot - —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –Ω–∞ WB. –í–æ—Ç –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n' \
          f'- üõí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n' \
          f'- ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–∞—Ö\n' \
          f'- üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö\n' \
          f'- üíº –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏\n' \
          f'- üöõ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–≥–∏–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n' \
          f'- üìë –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n\n' \
          f'–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n' \
          f'- üü© –ê–í–° –∞–Ω–∞–ª–∏–∑\n' \
          f'- üåä –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Storm: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ–µ–≤ WB –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ –≤—ã–∫—É–ø–∞—Ö\n' \
          f'- üë• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ WB\n' \
          f'- üóÉÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ (7, 14, 30, 60 –¥–Ω–µ–π)\n' \
          f'- ‚ùóÔ∏è–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã'
    bot.send_message(message.chat.id, text=f'{msg}', reply_markup=start_markup)

@bot.message_handler(content_types=['text'])
def add_api_key(message):
    all_users = db_query.select_all()
    telegram_id = message.from_user.id

    reg = False
    for user in all_users:
        if str(telegram_id) == user[0]:
            reg = True

    if reg:
        api_key = message.text
        orders_today = api_query.get_orders(api_key, 'today')
        msg, fl_orders_today = check_request(orders_today)
        if fl_orders_today:
            nm_id = orders_today[0]['nmId']
            ip_name = api_query.api_ip(nm_id, api_key)
            api_keys_list = db_query.select_api_key(telegram_id).split('|')
            ip_names_list = db_query.select_ip_name(telegram_id).split('|')
            print(api_keys_list)
            if api_keys_list[0] == 'none' or api_keys_list[1] == 'none':
                confirm_marup = types.InlineKeyboardMarkup()
                if api_keys_list[0] == 'none':
                    new_api_key = f'{api_key}*|none'
                    new_ip_name = f'{ip_name}*|none'
                elif api_keys_list[1] == 'none':
                    new_api_key = f'{api_keys_list[0]}|{api_key}*'
                    new_ip_name = f'{ip_names_list[0]}|{ip_name}*'
                db_query.update_ip_name(telegram_id, new_ip_name)
                db_query.update_api_key(telegram_id, new_api_key)
                btn1 = types.InlineKeyboardButton('–î–∞', callback_data='confirm_api_key')
                btn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel_api_key')
                confirm_marup.add(btn1, btn2)
                bot.send_message(message.chat.id, text=f'{ip_name}\n\n–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á?', reply_markup=confirm_marup)
            else:
                bot.send_message(message.chat.id, text=f'–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 2 API –∫–ª—é—á–∞')
        else:
            bot.send_message(message.chat.id, text=f'–ù–µ—É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç')


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    data = call.data.split(':')
    telegram_id = call.from_user.id
    if data[0] == 'confirm_api_key':
        api_keys_list = db_query.select_api_key(telegram_id).split('|')
        ip_names_list = db_query.select_ip_name(telegram_id).split('|')
        if '*' in api_keys_list[0]:
            api_keys_list[0] = api_keys_list[0].split('*')[0]
            ip_names_list[0] = ip_names_list[0].split('*')[0]
        elif '*' in api_keys_list[1]:
            api_keys_list[1] = api_keys_list[1].split('*')[0]
            ip_names_list[1] = ip_names_list[1].split('*')[0]
        db_query.update_api_key(telegram_id, f'{api_keys_list[0]}|{api_keys_list[1]}')
        db_query.update_ip_name(telegram_id, f'{ip_names_list[0]}|{ip_names_list[1]}')
        msg = '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!\n\n' \
              'üïí –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, WB Order Bot —Å–æ–±–µ—Ä–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.'
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id)

    if data[0] == 'cancel_api_key':
        api_keys_list = db_query.select_api_key(telegram_id).split('|')
        ip_names_list = db_query.select_ip_name(telegram_id).split('|')
        if '*' in api_keys_list[0]:
            api_keys_list[0] = 'none'
            ip_names_list[0] = 'none'
        elif '*' in api_keys_list[1]:
            api_keys_list[1] = 'none'
            ip_names_list[1] = 'none'
        db_query.update_api_key(telegram_id, f'{api_keys_list[0]}|{api_keys_list[1]}')
        db_query.update_ip_name(telegram_id, f'{ip_names_list[0]}|{ip_names_list[1]}')
        bot.edit_message_text('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω', call.message.chat.id, call.message.message_id)

thread1 = threading.Thread(target=check_notifications).start()
bot.polling(non_stop=True, interval=0)
